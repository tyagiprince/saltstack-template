#! /usr/bin/env python
import os
import logging
import re
import click
from jinja2 import Template

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")
log = logging.getLogger(__name__)
log.info("Initializing generator...")


VALID_TYPES = {
    'ext_grain' : {
        "templates/ext/grain.py.jinja": "salt/ext/_grains/{{name}}.py"
    },
    'ext_module' : {
        "templates/ext/module.py.jinja": "salt/ext/_modules/{{name}}.py"
    },
    'ext_pillar' : {
        "templates/ext/pillar.py.jinja": "salt/ext/_pillar/{{name}}.py"
    },
    'ext_runner' : {
        "templates/ext/runner.py.jinja": "salt/ext/_runners/{{name}}.py"
    },
    'ext_state' : {
        "templates/ext/state.py.jinja": "salt/ext/_states/{{name}}.py"
    },
    'ext_util' : {
        "templates/ext/util.py.jinja": "salt/ext/_utils/{{name}}.py"
    },
    'orch' : {
        "templates/orch/init.sls.jinja": "salt/orch/{{name}}.sls"
    },
    'reactor' : {
        "templates/reactor/init.sls.jinja": "salt/reactors/{{name}}.sls"
    },
    'pillar' : {
        "templates/pillar/init.sls.jinja": "salt/pillars/{{env}}/{{name}}.sls"
    },
    'state' : {
        "templates/state/init.sls.jinja": "salt/states/{{env}}/{{name}}/{{version}}/init.sls",
        "templates/state/defaults.yaml.jinja": "salt/states/{{env}}/{{name}}/{{version}}/defaults.yaml",
        "templates/state/map.jinja.jinja": "salt/states/{{env}}/{{name}}/{{version}}/map.jinja",
        "templates/state/verify.sls.jinja": "salt/states/{{env}}/{{name}}/{{version}}/verify.sls",
        "templates/state/README.md.jinja": "salt/states/{{env}}/{{name}}/{{version}}/README.md",
        "templates/state/latest.sls.jinja": "salt/states/{{env}}/{{name}}/latest.sls",
    },
}


class Jinja(object):
    ROOT_PATH = os.path.abspath("%s/../" % os.path.dirname(os.path.realpath(__file__)))

    def __init__(self, template_type, name, env='dev', version="v1_0"):
        if template_type not in VALID_TYPES.keys():
            raise Exception("Invalid template type")
        self.name = name
        self.env = env
        self.template_type = template_type
        self.version = version
        log.info("Generator initialized for type: %s with name: %s in env: %s" % (self.template_type, self.name, self.env))

    def process(self):
        for input_path, output_path in self._paths().iteritems():
            input_path = os.path.join(self.ROOT_PATH, input_path)
            output_path = os.path.join(self.ROOT_PATH, output_path)
            self._write(self._read(input_path), output_path)

    def _paths(self):
        path_dict = {}
        for input_path, output_path in VALID_TYPES[self.template_type].iteritems():
            path_dict[input_path] = Template(output_path).render(name=self.name, env=self.env, version=self.version)
        return path_dict

    def _read(self, input_path):
        file = None
        with open(input_path, "r") as f:
            file = f.read()
        return Template(file)

    def _write(self, template, output_path):
        if os.path.exists(output_path):
            raise Exception("File already present at %s" % output_path)
        log.info("Writing file %s" % output_path)

        if not os.path.exists(os.path.dirname(output_path)):
            os.makedirs(os.path.dirname(output_path))

        with open(output_path, "w") as file:
            file.write(template.render(name=self.name))


class SanitizedNameType(click.ParamType):
    name = 'sanitized_name'

    def convert(self, value, param, ctx):
        if re.compile('^[a-z0-9_\.]+$').match(value) is None:
            self.fail("%s is not snake case" % value, param, ctx)
        else:
            return value

@click.command()
@click.option('--type', type=click.Choice(VALID_TYPES.keys()), help='type of file to generate', prompt=True)
@click.option('--name', prompt=True, type=SanitizedNameType(), help='name of the generated file')
@click.option('--env', default='dev', help='environment to place the file in (only applicable in state and pillar')
@click.option('--version', default='v1_0', help='version number (only applicable in state files)')
def create(name, type, env, version):
    Jinja(template_type=type, name=name, env=env, version=version).process()

if __name__ == '__main__':
    create()
